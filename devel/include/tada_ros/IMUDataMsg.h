// Generated by gencpp from file tada_ros/IMUDataMsg.msg
// DO NOT EDIT!


#ifndef TADA_ROS_MESSAGE_IMUDATAMSG_H
#define TADA_ROS_MESSAGE_IMUDATAMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tada_ros
{
template <class ContainerAllocator>
struct IMUDataMsg_
{
  typedef IMUDataMsg_<ContainerAllocator> Type;

  IMUDataMsg_()
    : accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , state(0.0)
    , swing_time(0.0)  {
    }
  IMUDataMsg_(const ContainerAllocator& _alloc)
    : accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , state(0.0)
    , swing_time(0.0)  {
  (void)_alloc;
    }



   typedef double _accel_x_type;
  _accel_x_type accel_x;

   typedef double _accel_y_type;
  _accel_y_type accel_y;

   typedef double _accel_z_type;
  _accel_z_type accel_z;

   typedef double _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef double _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef double _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef double _state_type;
  _state_type state;

   typedef double _swing_time_type;
  _swing_time_type swing_time;





  typedef boost::shared_ptr< ::tada_ros::IMUDataMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tada_ros::IMUDataMsg_<ContainerAllocator> const> ConstPtr;

}; // struct IMUDataMsg_

typedef ::tada_ros::IMUDataMsg_<std::allocator<void> > IMUDataMsg;

typedef boost::shared_ptr< ::tada_ros::IMUDataMsg > IMUDataMsgPtr;
typedef boost::shared_ptr< ::tada_ros::IMUDataMsg const> IMUDataMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tada_ros::IMUDataMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tada_ros::IMUDataMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tada_ros::IMUDataMsg_<ContainerAllocator1> & lhs, const ::tada_ros::IMUDataMsg_<ContainerAllocator2> & rhs)
{
  return lhs.accel_x == rhs.accel_x &&
    lhs.accel_y == rhs.accel_y &&
    lhs.accel_z == rhs.accel_z &&
    lhs.gyro_x == rhs.gyro_x &&
    lhs.gyro_y == rhs.gyro_y &&
    lhs.gyro_z == rhs.gyro_z &&
    lhs.state == rhs.state &&
    lhs.swing_time == rhs.swing_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tada_ros::IMUDataMsg_<ContainerAllocator1> & lhs, const ::tada_ros::IMUDataMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tada_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tada_ros::IMUDataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tada_ros::IMUDataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tada_ros::IMUDataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tada_ros::IMUDataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tada_ros::IMUDataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tada_ros::IMUDataMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tada_ros::IMUDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ebe3b0305f6c75def5f0d35a26d8b2f";
  }

  static const char* value(const ::tada_ros::IMUDataMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ebe3b0305f6c75dULL;
  static const uint64_t static_value2 = 0xef5f0d35a26d8b2fULL;
};

template<class ContainerAllocator>
struct DataType< ::tada_ros::IMUDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tada_ros/IMUDataMsg";
  }

  static const char* value(const ::tada_ros::IMUDataMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tada_ros::IMUDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 accel_x\n"
"float64 accel_y\n"
"float64 accel_z\n"
"float64 gyro_x\n"
"float64 gyro_y\n"
"float64 gyro_z\n"
"float64 state\n"
"float64 swing_time\n"
;
  }

  static const char* value(const ::tada_ros::IMUDataMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tada_ros::IMUDataMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accel_x);
      stream.next(m.accel_y);
      stream.next(m.accel_z);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.state);
      stream.next(m.swing_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMUDataMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tada_ros::IMUDataMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tada_ros::IMUDataMsg_<ContainerAllocator>& v)
  {
    s << indent << "accel_x: ";
    Printer<double>::stream(s, indent + "  ", v.accel_x);
    s << indent << "accel_y: ";
    Printer<double>::stream(s, indent + "  ", v.accel_y);
    s << indent << "accel_z: ";
    Printer<double>::stream(s, indent + "  ", v.accel_z);
    s << indent << "gyro_x: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "state: ";
    Printer<double>::stream(s, indent + "  ", v.state);
    s << indent << "swing_time: ";
    Printer<double>::stream(s, indent + "  ", v.swing_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TADA_ROS_MESSAGE_IMUDATAMSG_H
