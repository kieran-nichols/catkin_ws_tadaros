// Generated by gencpp from file tada_ros/EuropaMsg.msg
// DO NOT EDIT!


#ifndef TADA_ROS_MESSAGE_EUROPAMSG_H
#define TADA_ROS_MESSAGE_EUROPAMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tada_ros
{
template <class ContainerAllocator>
struct EuropaMsg_
{
  typedef EuropaMsg_<ContainerAllocator> Type;

  EuropaMsg_()
    : mx(0.0)
    , my(0.0)
    , fz(0.0)
    , t(0.0)  {
    }
  EuropaMsg_(const ContainerAllocator& _alloc)
    : mx(0.0)
    , my(0.0)
    , fz(0.0)
    , t(0.0)  {
  (void)_alloc;
    }



   typedef double _mx_type;
  _mx_type mx;

   typedef double _my_type;
  _my_type my;

   typedef double _fz_type;
  _fz_type fz;

   typedef double _t_type;
  _t_type t;





  typedef boost::shared_ptr< ::tada_ros::EuropaMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tada_ros::EuropaMsg_<ContainerAllocator> const> ConstPtr;

}; // struct EuropaMsg_

typedef ::tada_ros::EuropaMsg_<std::allocator<void> > EuropaMsg;

typedef boost::shared_ptr< ::tada_ros::EuropaMsg > EuropaMsgPtr;
typedef boost::shared_ptr< ::tada_ros::EuropaMsg const> EuropaMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tada_ros::EuropaMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tada_ros::EuropaMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tada_ros::EuropaMsg_<ContainerAllocator1> & lhs, const ::tada_ros::EuropaMsg_<ContainerAllocator2> & rhs)
{
  return lhs.mx == rhs.mx &&
    lhs.my == rhs.my &&
    lhs.fz == rhs.fz &&
    lhs.t == rhs.t;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tada_ros::EuropaMsg_<ContainerAllocator1> & lhs, const ::tada_ros::EuropaMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tada_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tada_ros::EuropaMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tada_ros::EuropaMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tada_ros::EuropaMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tada_ros::EuropaMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tada_ros::EuropaMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tada_ros::EuropaMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tada_ros::EuropaMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c9da1dd517ee166f38f63eacb3ba095";
  }

  static const char* value(const ::tada_ros::EuropaMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c9da1dd517ee166ULL;
  static const uint64_t static_value2 = 0xf38f63eacb3ba095ULL;
};

template<class ContainerAllocator>
struct DataType< ::tada_ros::EuropaMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tada_ros/EuropaMsg";
  }

  static const char* value(const ::tada_ros::EuropaMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tada_ros::EuropaMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 mx\n"
"float64 my\n"
"float64 fz\n"
"float64 t\n"
;
  }

  static const char* value(const ::tada_ros::EuropaMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tada_ros::EuropaMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mx);
      stream.next(m.my);
      stream.next(m.fz);
      stream.next(m.t);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EuropaMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tada_ros::EuropaMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tada_ros::EuropaMsg_<ContainerAllocator>& v)
  {
    s << indent << "mx: ";
    Printer<double>::stream(s, indent + "  ", v.mx);
    s << indent << "my: ";
    Printer<double>::stream(s, indent + "  ", v.my);
    s << indent << "fz: ";
    Printer<double>::stream(s, indent + "  ", v.fz);
    s << indent << "t: ";
    Printer<double>::stream(s, indent + "  ", v.t);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TADA_ROS_MESSAGE_EUROPAMSG_H
